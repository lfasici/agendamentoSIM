# Prompt para IA do Replit - Sistema de Agendamento Interno Simplificado

## INSTRU√á√ÉO PRINCIPAL PARA A IA DO REPLIT:

Crie um **sistema b√°sico de agendamento interno** para opera√ß√µes log√≠sticas com foco em simplicidade e funcionalidade essencial:

---

## üéØ **OBJETIVO DO APLICATIVO**
Desenvolver uma aplica√ß√£o web simples onde:
1. **Operadores** criam hor√°rios dispon√≠veis no calend√°rio
2. **Clientes internos** visualizam e agendam hor√°rios
3. **Sistema autom√°tico** envia confirma√ß√µes por email
4. **Relat√≥rios b√°sicos** para controle operacional

---

## üèóÔ∏è **ARQUITETURA T√âCNICA SIMPLIFICADA**

### **Stack Recomendado:**
- **Frontend:** React.js com Tailwind CSS
- **Backend:** Node.js com Express
- **Banco de Dados:** SQLite
- **Email:** EmailJS (gratuito, sem servidor)
- **Calend√°rio:** React-Calendar

### **Estrutura de Pastas:**
```
/
‚îú‚îÄ‚îÄ client/ (React frontend)
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ App.js
‚îú‚îÄ‚îÄ server/ (Node.js backend)
‚îÇ   ‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îî‚îÄ‚îÄ index.js
‚îú‚îÄ‚îÄ database/
‚îî‚îÄ‚îÄ README.md
```

---

## üìä **ESTRUTURA DO BANCO DE DADOS SIMPLIFICADA**

### **Tabela: agendamentos**
```sql
CREATE TABLE agendamentos (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    data_hora DATETIME NOT NULL,
    servico VARCHAR(100) NOT NULL,
    nome_cliente VARCHAR(200) NOT NULL,
    email_cliente VARCHAR(200) NOT NULL,
    telefone_cliente VARCHAR(20),
    empresa_cliente VARCHAR(200),
    observacoes TEXT,
    status VARCHAR(50) DEFAULT 'confirmado',
    codigo_confirmacao VARCHAR(10) UNIQUE,
    criado_em DATETIME DEFAULT CURRENT_TIMESTAMP
);
```

### **Tabela: horarios_disponiveis**
```sql
CREATE TABLE horarios_disponiveis (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    data_hora DATETIME NOT NULL,
    servico VARCHAR(100) NOT NULL,
    disponivel BOOLEAN DEFAULT 1,
    criado_em DATETIME DEFAULT CURRENT_TIMESTAMP
);
```

### **Dados Iniciais (Seeds):**
```sql
-- Tipos de servi√ßo
INSERT INTO horarios_disponiveis (data_hora, servico, disponivel) VALUES
('2024-12-15 08:00:00', 'Carregamento', 1),
('2024-12-15 10:00:00', 'Descarregamento', 1),
('2024-12-15 14:00:00', 'Carregamento', 1),
('2024-12-15 16:00:00', 'Descarregamento', 1);
```

---

## üé® **DESIGN SIMPLES E LIMPO**

### **Paleta de Cores B√°sica:**
```css
:root {
  --primary: #3B82F6;
  --success: #10B981;
  --warning: #F59E0B;
  --danger: #EF4444;
  --gray: #6B7280;
  --light-gray: #F3F4F6;
  --white: #FFFFFF;
}
```

### **Componentes Essenciais:**

#### **1. Header Simples**
- T√≠tulo: "Sistema de Agendamento"
- Navega√ß√£o: Home | Admin | Relat√≥rios

#### **2. Calend√°rio Principal**
- Vista mensal
- Hor√°rios livres em azul
- Hor√°rios ocupados em cinza
- Click para agendar

#### **3. Modal de Agendamento**
- Dados do cliente
- Tipo de servi√ßo
- Observa√ß√µes
- Bot√£o confirmar

---

## üîß **FUNCIONALIDADES ESSENCIAIS**

### **P√°gina Principal (Cliente):**
1. **Calend√°rio visual** com hor√°rios dispon√≠veis
2. **Modal de agendamento** ao clicar em hor√°rio livre
3. **Formul√°rio simples:** Nome, Email, Telefone, Empresa, Observa√ß√µes
4. **Confirma√ß√£o autom√°tica** com c√≥digo √∫nico
5. **Lista de agendamentos** do cliente (busca por email)

### **P√°gina Admin:**
1. **Criar hor√°rios** dispon√≠veis (data, hora, tipo servi√ßo)
2. **Visualizar todos** os agendamentos
3. **Cancelar/editar** agendamentos
4. **Adicionar hor√°rios** em lote (semana completa)

### **P√°gina Relat√≥rios:**
1. **Agendamentos por per√≠odo** (hoje, semana, m√™s)
2. **Agendamentos por servi√ßo** (carregamento vs descarregamento)
3. **Lista completa** com filtros b√°sicos
4. **Exportar para CSV** (opcional)

---

## üìß **SISTEMA DE E-MAILS B√ÅSICO**

### **Configura√ß√£o EmailJS:**
```javascript
// No frontend - sem servidor de email
emailjs.init("SUA_PUBLIC_KEY");

const enviarConfirmacao = (dadosAgendamento) => {
  emailjs.send(
    'service_id',
    'template_id',
    {
      to_email: dadosAgendamento.email,
      cliente_nome: dadosAgendamento.nome,
      data_hora: dadosAgendamento.dataHora,
      servico: dadosAgendamento.servico,
      codigo: dadosAgendamento.codigo
    }
  );
};
```

### **Template de Email Simples:**
```
Assunto: Agendamento Confirmado - C√≥digo: [CODIGO]

Ol√° [NOME],

Seu agendamento foi confirmado:

üìÖ Data/Hora: [DATA_HORA]
üöõ Servi√ßo: [SERVICO]
üè¢ Empresa: [EMPRESA]
üî¢ C√≥digo: [CODIGO]

Observa√ß√µes: [OBSERVACOES]

Para altera√ß√µes, entre em contato.

Atenciosamente,
Equipe Log√≠stica
```

---

## üíª **P√ÅGINAS E COMPONENTES**

### **1. App.js (Roteamento):**
```jsx
import { Routes, Route } from 'react-router-dom';
import Home from './pages/Home';
import Admin from './pages/Admin';
import Relatorios from './pages/Relatorios';

function App() {
  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/admin" element={<Admin />} />
        <Route path="/relatorios" element={<Relatorios />} />
      </Routes>
    </div>
  );
}
```

### **2. Home.js (Agendamento):**
```jsx
- Calend√°rio React-Calendar
- Lista de hor√°rios do dia selecionado
- Modal para dados do cliente
- Confirma√ß√£o de agendamento
```

### **3. Admin.js (Gest√£o):**
```jsx
- Formul√°rio criar hor√°rios
- Lista de todos agendamentos
- A√ß√µes: editar, cancelar
- Cria√ß√£o em lote
```

### **4. Relatorios.js (Relat√≥rios):**
```jsx
- Filtros por data
- Cards com totais
- Tabela de agendamentos
- Bot√£o exportar
```

---

## üóÑÔ∏è **API ENDPOINTS B√ÅSICAS**

### **Backend Routes:**
```javascript
// GET /api/horarios-disponiveis
// POST /api/horarios-disponiveis
// GET /api/agendamentos
// POST /api/agendamentos
// PUT /api/agendamentos/:id
// DELETE /api/agendamentos/:id
// GET /api/relatorios/periodo/:inicio/:fim
```

### **Exemplo de Endpoint:**
```javascript
// POST /api/agendamentos
app.post('/api/agendamentos', async (req, res) => {
  const { dataHora, servico, nome, email, telefone, empresa, observacoes } = req.body;
  
  // Gerar c√≥digo √∫nico
  const codigo = Math.random().toString(36).substr(2, 8).toUpperCase();
  
  // Salvar no banco
  const agendamento = await db.run(`
    INSERT INTO agendamentos 
    (data_hora, servico, nome_cliente, email_cliente, telefone_cliente, empresa_cliente, observacoes, codigo_confirmacao)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
  `, [dataHora, servico, nome, email, telefone, empresa, observacoes, codigo]);
  
  // Marcar hor√°rio como ocupado
  await db.run(`
    UPDATE horarios_disponiveis 
    SET disponivel = 0 
    WHERE data_hora = ? AND servico = ?
  `, [dataHora, servico]);
  
  res.json({ success: true, codigo });
});
```

---

## üìä **RELAT√ìRIOS B√ÅSICOS**

### **Cards de Resumo:**
```jsx
<div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
  <Card titulo="Hoje" valor={agendamentosHoje} />
  <Card titulo="Esta Semana" valor={agendamentosSemana} />
  <Card titulo="Carregamentos" valor={totalCarregamentos} />
  <Card titulo="Descarregamentos" valor={totalDescarregamentos} />
</div>
```

### **Tabela de Agendamentos:**
```jsx
<table className="w-full">
  <thead>
    <tr>
      <th>C√≥digo</th>
      <th>Data/Hora</th>
      <th>Cliente</th>
      <th>Servi√ßo</th>
      <th>Status</th>
    </tr>
  </thead>
  <tbody>
    {agendamentos.map(item => (
      <tr key={item.id}>
        <td>{item.codigo_confirmacao}</td>
        <td>{formatarDataHora(item.data_hora)}</td>
        <td>{item.nome_cliente}</td>
        <td>{item.servico}</td>
        <td><Badge status={item.status} /></td>
      </tr>
    ))}
  </tbody>
</table>
```

---

## üì¶ **DEPEND√äNCIAS M√çNIMAS**

### **Frontend (package.json):**
```json
{
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.8.0",
    "react-calendar": "^4.0.0",
    "axios": "^1.3.0",
    "tailwindcss": "^3.2.0",
    "emailjs-com": "^3.2.0",
    "date-fns": "^2.29.0"
  }
}
```

### **Backend (package.json):**
```json
{
  "dependencies": {
    "express": "^4.18.0",
    "sqlite3": "^5.1.0",
    "cors": "^2.8.0"
  }
}
```

---

## üöÄ **FLUXOS SIMPLIFICADOS**

### **Fluxo do Cliente:**
```
1. Acessa sistema
2. V√™ calend√°rio com hor√°rios livres
3. Clica em hor√°rio desejado
4. Preenche: Nome, Email, Telefone, Empresa
5. Confirma agendamento
6. Recebe c√≥digo e email autom√°tico
```

### **Fluxo do Admin:**
```
1. Acessa /admin
2. Cria hor√°rios dispon√≠veis
3. Visualiza todos agendamentos
4. Pode cancelar/editar se necess√°rio
5. Acessa relat√≥rios b√°sicos
```

---

## ‚öôÔ∏è **CONFIGURA√á√ïES REPLIT**

### **replit.nix:**
```nix
{ pkgs }: {
  deps = [
    pkgs.nodejs-18_x
    pkgs.sqlite
  ];
}
```

### **.replit:**
```toml
run = "npm run dev"
modules = ["nodejs-18"]

[deployment]
run = ["npm start"]
```

### **Scripts package.json:**
```json
{
  "scripts": {
    "dev": "concurrently \"npm run server\" \"npm run client\"",
    "server": "cd server && node index.js",
    "client": "cd client && npm start",
    "start": "cd server && node index.js"
  }
}
```

---

## üìã **CHECKLIST DE FUNCIONALIDADES**

### **‚úÖ Essenciais:**
- [ ] Calend√°rio visual com hor√°rios
- [ ] Agendamento simples (nome, email, telefone)
- [ ] C√≥digos √∫nicos de confirma√ß√£o
- [ ] Email autom√°tico de confirma√ß√£o
- [ ] Admin: criar/visualizar/cancelar
- [ ] Relat√≥rios b√°sicos por per√≠odo
- [ ] Interface responsiva

### **üîß T√©cnicas:**
- [ ] Banco SQLite funcional
- [ ] API REST b√°sica
- [ ] Valida√ß√µes de formul√°rio
- [ ] Tratamento de erros
- [ ] Deploy no Replit

---

## üí° **RESULTADO ESPERADO**

Ao final voc√™ ter√°:

‚úÖ **Sistema funcional** e simples  
‚úÖ **Agendamento em 3 cliques**  
‚úÖ **Emails autom√°ticos** de confirma√ß√£o  
‚úÖ **Admin b√°sico** para gest√£o  
‚úÖ **Relat√≥rios essenciais**  
‚úÖ **C√≥digo limpo** e organizado  
‚úÖ **Deploy pronto** no Replit  

**Tempo de desenvolvimento: 1-2 horas**

---

## üéØ **INSTRU√á√ïES FINAIS PARA A IA**

1. **Mantenha MUITO simples** - foque no essencial
2. **Sem login complexo** - admin sem autentica√ß√£o
3. **EmailJS no frontend** - sem servidor de email
4. **SQLite local** - sem configura√ß√µes complexas
5. **Interface limpa** - Tailwind b√°sico
6. **Poucos componentes** - m√°ximo de 5-6 arquivos
7. **Dados de exemplo** inclusos para testar

**Cole este prompt na IA do Replit para criar o sistema simplificado!**